#!/usr/bin/env python3

import json
import logging
import sys

import pyinotify
import requests
import socketio
from systemd.journal import JournalHandler
from wb_common.mqtt_client import DEFAULT_BROKER_URL, MQTTClient

config_file = "/etc/wb-mqtt-urri.conf"

# Read the JSON configuration file
print("URRI service starting")
try:
    with open(config_file, "r") as file:
        config = json.load(file)
        urri_ip = config["urri_ip"]
        urri_port = config["urri_port"]
        mqtt_url = config.get("mqtt_url", DEFAULT_BROKER_URL)
        urri_url = "http://" + urri_ip + ":" + str(urri_port)
        debug = bool(config["debug"])
except:
    sys.exit("Bad configuration, check " + config_file)

logger = logging.getLogger(__name__)
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.DEBUG if debug else logging.INFO)
logger.setLevel(logging.DEBUG if debug else logging.INFO)
logger.addHandler(stream_handler)


class ConfigHandler(pyinotify.ProcessEvent):
    def process_IN_MODIFY(self, event):
        if event.pathname == config_file:
            logger.info("Config file has been modified")
            sys.exit("Config " + config_file + " edited, restarting")


# initialize socket.io client
urriClient = socketio.Client(logger=debug, engineio_logger=debug)

# initialize mqtt client
mqttClient = MQTTClient("wb-mqtt-urri", mqtt_url)


# socket.io events
@urriClient.event
def connect():
    logger.info("Connected to URRI " + urri_url)


@urriClient.event
def connect_error(data):
    sys.exit("Connection to URRI failed!\nError:" + str(data))


# status from socketio
@urriClient.on("status")
def on_status_message(status_dict):
    logger.debug("URRI status message received")
    logger.debug(str(status_dict) + "\n\n\n")

    # get status by request:
    power = getPower()
    logger.debug("STATUS: POWER " + power)

    # playback status:
    try:
        playback = ""
        if "play" in str(status_dict["playback"]):
            playback = "1"
        else:
            playback = "0"
        logger.debug("STATUS: PLAYBACK " + playback)
        mqttClient.publish("/devices/urri/controls/Playback", playback, retain=True)
    except:
        pass

    # AUX status:
    aux = ""
    try:
        if "True" in str(status_dict["AUX"]):
            aux = "1"
        else:
            aux = "0"
        logger.debug("STATUS: AUX " + aux)
        mqttClient.publish("/devices/urri/controls/AUX", aux, retain=True)
    except:
        pass

    # muted status:
    try:
        muted = ""
        if "True" in str(status_dict["muted"]):
            muted = "1"
        else:
            muted = "0"
        logger.debug("STATUS: MUTED " + muted)
        mqttClient.publish("/devices/urri/controls/Mute", muted, retain=True)
    except:
        pass

    # volume
    try:
        volume = str(status_dict["volume"])
        mqttClient.publish("/devices/urri/controls/Volume", volume, retain=True)
        logger.debug("STATUS: VOLUME " + volume)
    except:
        pass

    # sourcetype
    try:
        sourcetype = ""
        if status_dict["source"]["sourceType"] == 0:
            sourcetype = "Internet Radio"
        elif status_dict["source"]["sourceType"] == 1:
            sourcetype = "File System"
        elif status_dict["source"]["sourceType"] == 2:
            sourcetype = "Preset"
        elif status_dict["source"]["sourceType"] == 3:
            sourcetype = "Multiroom Slave"
        elif status_dict["source"]["sourceType"] == 4:
            sourcetype = "Airplay"
        elif status_dict["source"]["sourceType"] == 5:
            sourcetype = "User Internet Radio"
        elif status_dict["source"]["sourceType"] == 6:
            sourcetype = "Spotify"
        else:
            sourcetype = "Unknown"
        if aux == "1":
            sourcetype = "AUX"
        mqttClient.publish("/devices/urri/controls/SourceType", sourcetype, retain=True)
        logger.debug("STATUS: SOURCETYPE " + sourcetype)
    except:
        pass

    # sourcename
    try:
        sourcename = ""
        try:
            sourcename = status_dict["source"]["name"]
        except:
            pass
        try:
            sourcename = status_dict["source"]["path"]
        except:
            pass
        if aux == "1":
            sourcename = "AUX"
        mqttClient.publish("/devices/urri/controls/SourceName", sourcename, retain=True)
        logger.debug("STATUS: SOURCENAME " + sourcename)
    except:
        pass

    # source radio id
    try:
        radioid = ""
        try:
            radioid = str(status_dict["source"]["id"])
        except:
            pass
        mqttClient.publish("/devices/urri/controls/RadioID", radioid, retain=True)
        logger.debug("STATUS: RADIO ID " + radioid)
    except:
        pass

    # songtitle
    try:
        songtitle = str(status_dict["songTitle"])
        if aux == "1":
            songtitle = ""
        mqttClient.publish("/devices/urri/controls/SongTitle", songtitle, retain=True)
        logger.debug("STATUS: SONGTITLE " + songtitle)
    except:
        songtitle = "No Title"
        mqttClient.publish("/devices/urri/controls/SongTitle", songtitle, retain=True)
        logger.debug("STATUS: SONGTITLE " + songtitle)
        pass


# request section
def getPower():
    response = requests.post(url=(urri_url + "/getPower"))
    if "1" in str(response.content):
        powerstate = "1"
    else:
        powerstate = "0"
    mqttClient.publish("/devices/urri/controls/Power", powerstate, retain=True)
    return powerstate


# mqtt callbacks
def on_message_power(client, userdata, msg):
    logger.debug("URRI command power " + str(msg.payload))
    if "1" in str(msg.payload):
        out_url = "/wakeUp"
    else:
        out_url = "/standby"
    requests.post(url=(urri_url + out_url))
    getPower()


# playback toggle
def on_message_playback(client, userdata, msg):
    if "1" in str(msg.payload):
        out_url = "/play"
    else:
        out_url = "/stop"
    requests.post(url=(urri_url + out_url))


# mute toggle
def on_message_mute(client, userdata, msg):
    if "1" in str(msg.payload):
        out_url = "/mute"
    else:
        out_url = "/unmute"
    requests.post(url=(urri_url + out_url))


# AUX toggle
def on_message_aux(client, userdata, msg):
    if "1" in str(msg.payload):
        out_url = "/enableAUX"
    else:
        out_url = "/disableAUX"
    requests.post(url=(urri_url + out_url))


# set volume
def on_message_volume(client, userdata, msg):
    volume = int(str(msg.payload.decode("utf-8")))
    if volume >= 0 and volume <= 100:
        out_url = "/setVolume/" + str(volume)
        requests.post(url=(urri_url + out_url))


# set radio id
def on_message_radioid(client, userdata, msg):
    radioid = int(str(msg.payload.decode("utf-8")))
    out_headers = {"Content-Type": "application/json"}
    out_url = "/radio"
    out_data = {"id": radioid}
    out_json = json.dumps(out_data)
    response = requests.post(headers=out_headers, url=(urri_url + out_url), data=out_json)
    logger.debug(
        "SET RADIO ID: " + out_json + " STATUS: " + str(response.status_code) + "RESPONSE: " + response.text
    )


# next track
def on_message_next(client, userdata, msg):
    out_url = "/next"
    requests.post(url=(urri_url + out_url))


# previous track
def on_message_previous(client, userdata, msg):
    out_url = "/previous"
    requests.post(url=(urri_url + out_url))


# publish meta topics for device to match WB conventions
def define_device():
    mqttClient.publish("/devices/urri/meta/driver", "wb-mqtt-urri", retain=True)
    mqttClient.publish("/devices/urri/meta/title/ru", "Сетевой ресивер URRI", retain=True)
    mqttClient.publish("/devices/urri/meta/title/en", "Network reciever URRI", retain=True)
    mqttClient.publish("/devices/urri/meta/name", "Network reciever URRI", retain=True)


# publish meta topics to match WB conventions and subscribing for controls
def add_channels():
    # power
    mqttClient.subscribe("/devices/urri/controls/Power/on")
    mqttClient.message_callback_add("/devices/urri/controls/Power/on", on_message_power)
    meta_options = {"type": "switch", "order": "1", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/Power/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/Power/meta/readonly", 0, retain=True)

    # volume
    mqttClient.subscribe("/devices/urri/controls/Volume/on")
    mqttClient.message_callback_add("/devices/urri/controls/Volume/on", on_message_volume)
    meta_options = {"type": "range", "order": "2", "readonly": "false", "max": "100"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/Volume/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/Volume/meta/readonly", 0, retain=True)

    # playback
    mqttClient.subscribe("/devices/urri/controls/Playback/on")
    mqttClient.message_callback_add("/devices/urri/controls/Playback/on", on_message_playback)
    meta_options = {"type": "switch", "order": "3", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/Playback/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/Playback/meta/readonly", 0, retain=True)

    # mute
    mqttClient.subscribe("/devices/urri/controls/Mute/on")
    mqttClient.message_callback_add("/devices/urri/controls/Mute/on", on_message_mute)
    meta_options = {"type": "switch", "order": "4", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/Mute/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/Mute/meta/readonly", 0, retain=True)

    # AUX
    mqttClient.subscribe("/devices/urri/controls/AUX/on")
    mqttClient.message_callback_add("/devices/urri/controls/AUX/on", on_message_aux)
    meta_options = {"type": "switch", "order": "5", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/AUX/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/AUX/meta/readonly", 0, retain=True)

    # next
    mqttClient.subscribe("/devices/urri/controls/Next/on")
    mqttClient.message_callback_add("/devices/urri/controls/Next/on", on_message_next)
    meta_options = {"type": "pushbutton", "order": "50", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/Next/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/Next/meta/readonly", 0, retain=True)

    # previous
    mqttClient.subscribe("/devices/urri/controls/Previous/on")
    mqttClient.message_callback_add("/devices/urri/controls/Previous/on", on_message_previous)
    meta_options = {"type": "pushbutton", "order": "51", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/Previous/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/Previous/meta/readonly", 0, retain=True)

    # sourcetype
    meta_options = {"type": "text", "order": "70", "readonly": "true"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/SourceType/meta", meta_json, retain=True)
    # sourcename
    meta_options = {"type": "text", "order": "71", "readonly": "true"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/SourceName/meta", meta_json, retain=True)

    # radio ID
    mqttClient.subscribe("/devices/urri/controls/RadioID/on")
    mqttClient.message_callback_add("/devices/urri/controls/RadioID/on", on_message_radioid)
    meta_options = {"type": "value", "order": "80", "readonly": "false"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/RadioID/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/RadioID/meta/readonly", 0, retain=True)

    # title
    meta_options = {"type": "text", "order": "90", "readonly": "true"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/SongTitle/meta", meta_json, retain=True)
    # IP addr
    meta_options = {"type": "text", "order": "99", "readonly": "true"}
    meta_json = json.dumps(meta_options, indent=0)
    mqttClient.publish("/devices/urri/controls/IP address/meta", meta_json, retain=True)
    mqttClient.publish("/devices/urri/controls/IP address", urri_ip, retain=True)


# callback on connect to MQTT broker
def on_mqtt_connect(client, userdata, flags, rc):
    if rc == 0:
        logger.info("Connected to MQTT " + mqtt_url)
        define_device()
        add_channels()
        urriClient.connect(urri_url)

    else:
        sys.exit("Failed to connect, return code %d\n", rc)


wm = pyinotify.WatchManager()
mask = pyinotify.IN_MODIFY
handler = ConfigHandler()
notifier = pyinotify.ThreadedNotifier(wm, handler)
wdd = wm.add_watch(config_file, mask, rec=False)
notifier.start()

# run MQTT
mqttClient.on_connect = on_mqtt_connect
mqttClient.start()
